{
  "uid" : "2b94f6134390152c",
  "name" : "正常流程",
  "fullName" : "webdemo1.test_03.TestDemo#test_login",
  "historyId" : "086014672f423a09822731ae0a909622",
  "time" : {
    "start" : 1647925823206,
    "stop" : 1647925823238,
    "duration" : 32
  },
  "description" : "用户登录接口",
  "descriptionHtml" : "<p>用户登录接口</p>\n",
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <webdemo1.test_03.TestDemo object at 0x0000024E85C1A340>\ncase = <comm.excel_Utils.CaseData object at 0x0000024E85C1DA60>\n\n    @allure.description(\"用户登录接口\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url,name='接口路径')\n        allure.attach(body=case.case_data,name='请求参数')\n        respons = requests.post(url=case.url, data=eval(case.case_data))\n>       res_body = respons.json()\n\nwebdemo1\\test_03.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\Python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\Python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000024E83A80610>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n\\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\\n\\t<meta name=\"r...er-downloads\" class=\"ie_updater_ie\" target=\"_blank\">IE 10.0以上</a>\\n  \\t</div>\\n</div>\\n<![endif] -->\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Python\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "用户登录接口",
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <webdemo1.test_03.TestDemo object at 0x0000024E85C1A340>\ncase = <comm.excel_Utils.CaseData object at 0x0000024E85C1DA60>\n\n    @allure.description(\"用户登录接口\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url,name='接口路径')\n        allure.attach(body=case.case_data,name='请求参数')\n        respons = requests.post(url=case.url, data=eval(case.case_data))\n>       res_body = respons.json()\n\nwebdemo1\\test_03.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\Python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\Python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000024E83A80610>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n\\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\\n\\t<meta name=\"r...er-downloads\" class=\"ie_updater_ie\" target=\"_blank\">IE 10.0以上</a>\\n  \\t</div>\\n</div>\\n<![endif] -->\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Python\\lib\\json\\decoder.py:355: JSONDecodeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c0a61e0786474b9b",
      "name" : "接口路径",
      "source" : "c0a61e0786474b9b.attach",
      "type" : "text/plain",
      "size" : 81
    }, {
      "uid" : "42ef551f78b48192",
      "name" : "请求参数",
      "source" : "42ef551f78b48192.attach",
      "type" : "text/plain",
      "size" : 51
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "用户登录模块"
  }, {
    "name" : "parentSuite",
    "value" : "webdemo1"
  }, {
    "name" : "suite",
    "value" : "test_03"
  }, {
    "name" : "subSuite",
    "value" : "TestDemo"
  }, {
    "name" : "host",
    "value" : "小扁豆"
  }, {
    "name" : "thread",
    "value" : "10344-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "webdemo1.test_03"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "<comm.excel_Utils.CaseData object at 0x0000024E85C1DA60>"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2b94f6134390152c.json",
  "parameterValues" : [ "<comm.excel_Utils.CaseData object at 0x0000024E85C1DA60>" ]
}